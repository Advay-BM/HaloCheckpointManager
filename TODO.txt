

Cleanup:
Settings GetValue should not be used to set value (unreference, make seperate set value method)
Cleanup how GetValue vs GetValueDisplay work and who can use them
resolveDependentCheat macro should take game as arg
formatter pass
compiler warning pass
linter pass


** FIX SHOW OPTIONAL CHEAT FAILURES BUTTON**

Waypoint3D:
	* Add "Waypoint List" label at top of list 
	* Show how many waypoints are filtered by the render filter
	* Add index before each waypoint (pad to 3 char - who's gonna use more than 999 waypoints?)
	* toggle/functionality to offset waypoint render position by camera height when in first person (need a service to measure this lmao)
	* Finish waypoint deserialisation
	* Add camera data for non h1/h2 game
	* Waypoints z depth issues: they just render in order in list when ideally they'd be ordered by distance
	* Setup GUIRequiredServices for rest of waypoint GUI elements


Skull Selector:
	* Create a new kind of Setting, PointerSyncedSetting
		* instead of the value being in our control, it reads off a multilevel pointer of game memory
			* Constructor is passed a string of pointer name, and ref to PointerManager. Creates internal impl of itself for each gamestate. 
			* (SettingsStateAndEvents will now need ref to PointerManager but thats fine).
			* Constructor failure sets impl std::optional<MultilevelPointer> to std::nullopt, and sets an impl "last error" string (private, with const get accessor). 
				* Constructor DOES NOT THROW
			* When GUIElementConstructor constructs the GUIElement, passing it in the PointerSyncedSetting, the GUIElement constructor itself checks if the PointerSyncedSetting->thisGameImpl->std::optional<MultilevelPointer> is nullopt 
								(via bool accessor ofc, it shouldn't know about pointer internals).
				* If it is nullopt, GUIElement constructor throws HCMInitException, prepending the "last error" string.
		* PointerSyncedSetting<T> provides get and set funcs for the data
			* Get returns std::optional<T> (in case of multilevel pointer failure, or constructor failure that was somehow ignored)
			* Set returns bool for success (GUI ought to confirm Get is not std::nullopt before doing Set but no biggie if not)
		* No serialisation.
	* Then I just need to RE all the flags and bits.
		* Speaking of bits: should I bother making a MultiLevelPointer extension for representing a byte+bit address (as opposed to usual byte only)?
			* There are a couple of previously implemented things I could update to use this.
			* Makes maintaining the InternalPointerData.xml simpler.
			* Also makes using the pointer much simpler.
	* GUI should include some obvious warnings about
		* Performance maybe sucking while rendering the toggles (er, need to check if it does indeed suck or not. Maybe it's fine)
		* Checkpoint stores/loads skull state





DONE LIST:
Fix ctrl-tab input bringing up imgui thing
h1 rng in displayinfo


backburner (tasks to do eventually):
freeCamera for h3, 0d, hr, h4
freeCamera automation stuff 
freeCamera velocity-based interpolator (and maintain/set velocity stuff)
3d object info overlay

trigger overlay
sprint meter



--------------


GUI Hierarchy (goal)
* Control
	* hotkey: toggle main GUI 
	* bool: Free cursor when GUI visible 
	* bool: Pause game when GUI visible 
	* bool: Freeze inputs when GUI visible 
	* bool: Pause Game 
		* action: Advance x ticks 
* Save Management
	* action: Inject Checkpoint
		* bool: Warn on injecting to wrong level 
		* bool: Force level load to different levels 
	* action: Dump Checkpoint
		* bool: Autoname checkpoints 
	* action: Inject Core Save
		* bool: Warn on injecting to wrong level 
		* bool: Force level load to different levels //TODO
	* action: Dump Core Save
		* bool: Autoname checkpoints 
	* action: Force Checkpoint
	* action: Revert
	* action: Force Double Revert
	* action: Force Core Save
	* action: Force Core Load
	* bool: Disable Natural Checkpoints //TODO
* Cheats
	* bool: Speedhack
	* bool: Invulnerability
	* bool: AI Freeze 
	* action: Force Teleport 
	* action: Force Launch 
	* bool: Infinite Ammo/Grenades //TODO
	* Skulls (is just a heading) //TODO
		* then each skull listed as a bool //TODO
	* bool: Cheat Medusa 
 * Overlays
	* bool: Display Player/Game Info //TODO
		// options? //TODO
	* bool: Display All Entity Info //TODO
		// options? //TODO
	* bool: Trigger Overlay //TODO
		// options? //TODO
	* bool: 3D Waypoint //TODO
		// options? //TODO
	* Minisplitter //TODO
		// options? //TODO
	* Sprint Meter //TODO
		// options? //TODO
 * Camera
	* bool: Freecam //TODO
	* bool: Freeze player input while freecamming //TODO
	* bool: Pause game while freecamming //TODO
	* action: Teleport To Camera //TODO
 * Theater
	* bool: No-clip camera//TODO
	* bool: Theater Synchronoiser //TODO






	* Pause cheat causing theater desync
	* Natural CP
	* Skull stuff
	* 




maybe:
* Random practice mode
* Synchronoiser




HCMExternal filterSearch thingy
Add backup cheats system and internal injection toggle to external
add loading the correct level if possible on inject / change level feature in general
Update pointer data to make unit tests pass





Handled unhandled exceptions. Don't cause an issue for me but might for someone else:
* One of my control->MCC-midhook services is having a small heartattack with null values when calling scopedRequests right at init
	* I THINK i've fixed this by adding a half second delay before modal popup begins.