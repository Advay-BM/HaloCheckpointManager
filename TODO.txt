
NEAR FUTURE TODO:
 ---- RELEASE as 3.1.1
  freecam/speedhack crashes - step with vs debugger

Add render distance filter for trigger overlay
make free camera translation speed hotkeys only work when freecam enabled
add OOB camera fix (third gen)
snap factor of freecam doesn't respond to fps properly
check odst camera pointer
fix modal dialogs preventing alt tabs
freeCamera for  hr, h4
sprint Meter h4/hr
investigate project cartographer support
freeCamera automation stuff 
3d object info overlay

FUTURE TODO: 
* refactor GetPosition services into Quake/Havok nomenclature, and to use std::expected instead of throwing exceptions
* display2dinfo ghosting info (desync/difference between quake and havok positions)
* refactor a bunch of simple services to use std::expected
	* !! add new cheaper virtual error type exposing a what(). returning std::unexpected(Exception) is dumb/expensive af
* several of my settings enums would be better represented as bitmasks


* Some big refactoring:
Replace ObjectTableRange & GetObjectAddress & GetObjectPhysics w/ ObjectPool. Concept of CommonObjectType, CommonUnitType, CommonBipdType etc, + game specialisations eg H1ObjectType, etc.
	* use templated structs (need to double check that htis would work)
TagNameTable to replace GetTagName.
DebugNameTable for triggers (except h1).. ergh h3+ are hard
templated scenario tag struct etc etc
* fix tickadvance issues (caused by the scopedServiceRequest for pausing the game not always working properly)
	* scopedServiceRequests should no longer use caller id system and instead just setup a callback similiar to ObservedEvents













BACKBURNER (tasks to do eventually):
* freeCamera velocity-based interpolator (and maintain/set velocity stuff)
* HCMExternal filterSearch thingy
* Add backup cheats system and internal injection toggle to external
* add loading the correct level if possible on inject / change level feature in general

CODE CLEANUP (eventually eventually)
* Refactor optionalCheats to not reference settings, instead provide all their functionality in public api - add Commander (Presenter may be a better name) layer to bind settings-events to calling said api
	* then pull out all optionalCheats (rename to mccService maybe) into seperate library that other devs/projects can use
	* optinalCheatStore should return std::expected<mccService> instead of throwing InitException. Let caller throw if they choose to. 
	* instead of all our optionalCheats storing weak_ptrs to dependent services, maybe they should just hold the optionalCheatStore and call that when they want something instead of lockOrThrow
		* this removes boilerplate, and prevents uninitialized weak_ptrs
* Settings GetValue should not be used to set value (unreference, make seperate set value method)
* Cleanup how GetValue vs GetValueDisplay work and who can use them (clean up unarySettings vs binarySettings)
* resolveDependentCheat macro should take game as arg
* formatter pass
* compiler warning pass
* linter pass
* update unit tests

--------------


maybe:
* Random practice mode (Select multiple checkpoints and have them randomly injected - including cross level loading)
* Synchronise (theater, coop)
