
3.1 TODO
* impl triggerOverlay for HR and H4 (mainly RE trigger data location and the triggerDataStruct)
* impl softCeilingOverlay for OD, HR, H4
* confirm that triggerHitPosition works for all games (ie when in vehicles)



FUTURE TODO: 
* upgrade sensitivity drift detector (actually do the float math and check for drift)
* Sprint Meter h4/hr
* freeCamera for h3, 0d, hr, h4
* freeCamera automation stuff 
* 3d object info overlay
* refactor GetPosition services into Quake/Havok nomenclature, and to use std::expected instead of throwing exceptions
* display2dinfo ghosting info (desync/difference between quake and havok positions)
* refactor a bunch of simple services to use std::expected
	* !! add new cheaper virtual error type exposing a what()
* bool script mode? (hacky implementation of scriptReader for ce-bool only? might not take too long if I'm really hacky)
* several of my settings enums would be better represented as bitmasks


* Some big refactoring:
Replace ObjectTableRange & GetObjectAddress & GetObjectPhysics w/ ObjectPool. Concept of CommonObjectType, CommonUnitType, CommonBipdType etc, + game specialisations eg H1ObjectType, etc.
	* use templated structs (need to double check that htis would work)
TagRefernece concept and TagReference resolver.
TagNameTable to replace GetTagName.
DebugNameTable for triggers (except h1).. ergh h3+ are hard
templated scenario tag struct etc etc








* Fix reach && ODST zoneset cheat -> split switch zoneset to seperate feature from switch bsp
* fix tickadvance issues (caused by the scopedServiceRequest for pausing the game not always working properly)




BACKBURNER (tasks to do eventually):
* freeCamera velocity-based interpolator (and maintain/set velocity stuff)
* HCMExternal filterSearch thingy
* Add backup cheats system and internal injection toggle to external
* add loading the correct level if possible on inject / change level feature in general

CODE CLEANUP (eventually eventually)
* Refactor optionalCheats to not reference settings, instead provide all their functionality in public api - add Commander layer to bind settings-events to calling said api
	* then pull out all optionalCheats (rename to mccService maybe) into seperate library that other devs/projects can use
	* optinalCheatStore should return std::expected<mccService> instead of throwing InitException. Let caller throw if they choose to. 
	* instead of all our optionalCheats storing weak_ptrs to dependent services, maybe they should just hold the optionalCheatStore and call that when they want something instead of lockOrThrow
		* this removes boilerplate, and prevents uninitialized weak_ptrs
* Settings GetValue should not be used to set value (unreference, make seperate set value method)
* Cleanup how GetValue vs GetValueDisplay work and who can use them (clean up unarySettings vs binarySettings)
* resolveDependentCheat macro should take game as arg
* formatter pass
* compiler warning pass
* linter pass
* update unit tests

--------------


maybe:
* Random practice mode (Select multiple checkpoints and have them randomly injected - including cross level loading)
* Synchronise (theater, coop)
