#pragma once
#include "pch.h"
#include "Invulnerability.h"
#include "ModuleHook.h"
#include "MultilevelPointer.h"
#include "MidhookContextInterpreter.h"
#include "PointerManager.h"
#include "SettingsStateAndEvents.h"
#include "Datum.h"
#include "RuntimeExceptionHandler.h"
#include "DIContainer.h"
#include "IMCCStateHook.h"
#include "GetPlayerDatum.h"
#include "IMakeOrGetCheat.h"
#include "GetObjectAddress.h"
#include "DynamicStructFactory.h"

class Halo1InvulnerabilityImpl : public InvulnerabilityImpl, public std::enable_shared_from_this<Halo1InvulnerabilityImpl>
{
private:
	static inline Halo1InvulnerabilityImpl* instance = nullptr;
	// event callbacks
	ScopedCallback<eventpp::CallbackList<void(bool&)>> mInvulnerabilityToggleCallbackHandle;
	ScopedCallback<ActionEvent> mInvulnerabilityHotkeyCallbackHandle;

	// injected services
	gsl::not_null<std::shared_ptr<IMCCStateHook>> mccStateHook;
	gsl::not_null<std::shared_ptr<IMessagesGUI>> messagesGUI;
	gsl::not_null<std::shared_ptr<RuntimeExceptionHandler>> runtimeExceptions;
	gsl::not_null<std::shared_ptr<SettingsStateAndEvents>> settings;
	gsl::not_null<std::shared_ptr< GetPlayerDatum>> getPlayerDatum;
	gsl::not_null<std::shared_ptr< GetObjectAddress>> getObjectAddress;

	//data
	static inline std::shared_ptr<ModuleMidHook> invulnerabilityHook;
	static inline std::shared_ptr<MultilevelPointer> invulnerabilityFunction;
	static inline std::shared_ptr<MidhookContextInterpreter> invulnerabilityFunctionContext;
	enum class bipedDataFields { currentVehicleDatum };
	std::shared_ptr<DynamicStruct<bipedDataFields>> playerDataStruct;


	static void makeInvulnerable(SafetyHookContext& ctx)
	{
		LOG_ONCE(PLOG_DEBUG << "making object invulnerable");
		ctx.rflags = ctx.rflags | (1UL << 6);
	}

	static void invulnerabilityHookFunction(SafetyHookContext& ctx)
	{
		LOG_ONCE(PLOG_DEBUG << "invulnerabilityHookFunction running");
		try
		{

			if (instance->settings->invulnerabilityNPCToggle->GetValue())
			{
				// when this option checked, we make EVERYTHING invuln- no need to check what's getting damaged
				return makeInvulnerable(ctx);
			}

			enum class param
			{
				currentlyDamagedUnitDatum
			};
			auto* ctxInterpreter = invulnerabilityFunctionContext.get();
			LOG_ONCE_CAPTURE(PLOG_DEBUG << "resolvedParam: " << resolvedParam, resolvedParam = ctxInterpreter->getParameterRef(ctx, (int)param::currentlyDamagedUnitDatum));

			Datum currentlyDamagedUnitDatum = *(Datum*)ctxInterpreter->getParameterRef(ctx, (int)param::currentlyDamagedUnitDatum);
			Datum playersCurrentDatum = instance->getPlayerDatum->getPlayerDatum();


			if (playersCurrentDatum == nullDatum) return; // might happen when the player is dead, depending on game version / pointer used

			// check if current actor is player
			if (currentlyDamagedUnitDatum == playersCurrentDatum)
			{
				return makeInvulnerable(ctx);
			}

			// update address of players biped data
			LOG_ONCE(PLOG_DEBUG << "updating playerDataStructs currentBaseAddress");
			instance->playerDataStruct->currentBaseAddress = instance->getObjectAddress->getObjectAddress(playersCurrentDatum, Halo1ObjectType::Biped);

			// get current vehicle datum
			LOG_ONCE(PLOG_DEBUG << "looking up playersCurrentVehicleDatum");
			Datum playersCurrentVehicleDatum = *instance->playerDataStruct->field<Datum>(bipedDataFields::currentVehicleDatum);
			LOG_ONCE_CAPTURE (PLOG_DEBUG << "playersCurrentVehicleDatum: " << datum, datum = playersCurrentVehicleDatum);

			// if the current damaged unit is the players current vehicle, make invuln!
			if (currentlyDamagedUnitDatum == playersCurrentVehicleDatum && playersCurrentVehicleDatum != nullDatum)
			{
				LOG_ONCE_CAPTURE(PLOG_VERBOSE << "making players vehicle invuln!: " << datum, datum = currentlyDamagedUnitDatum);
				return makeInvulnerable(ctx);
			}

			LOG_ONCE_CAPTURE(PLOG_VERBOSE << "not making invulnerable: " << datum, datum = currentlyDamagedUnitDatum);
		}
		catch (HCMRuntimeException ex)
		{
			instance->runtimeExceptions->handleMessage(ex);
			instance->settings->invulnerabilityToggle->resetToDefaultValue();
		}




	}

	void onInvulnToggle(bool& newVal)
	{
		PLOG_DEBUG << "onInvulnToggle: newval: " << newVal;
		invulnerabilityHook->setWantsToBeAttached(newVal);
		messagesGUI->addMessage(newVal ? "Invulnerability enabled." : "Invulnerability disabled.");
	}

public:
	Halo1InvulnerabilityImpl(GameState game, IDIContainer& dicon)
		: settings(dicon.Resolve<SettingsStateAndEvents>()),
		mInvulnerabilityToggleCallbackHandle(dicon.Resolve<SettingsStateAndEvents>()->invulnerabilityToggle->valueChangedEvent, [this](bool& newval) { onInvulnToggle(newval); }),
		mInvulnerabilityHotkeyCallbackHandle(dicon.Resolve<SettingsStateAndEvents>()->invulnerabilityHotkeyEvent, [invulnerabilityToggle = dicon.Resolve<SettingsStateAndEvents>()->invulnerabilityToggle]()
			{
				invulnerabilityToggle->flipBoolSetting();
			}),
		mccStateHook(dicon.Resolve<IMCCStateHook>()),
		messagesGUI(dicon.Resolve<IMessagesGUI>()),
		runtimeExceptions(dicon.Resolve<RuntimeExceptionHandler>()),
		getPlayerDatum(resolveDependentCheat(GetPlayerDatum)),
		getObjectAddress(resolveDependentCheat(GetObjectAddress))
	{
		if (instance) throw HCMInitException("Cannot have more than one Halo1InvulnerabilityImpl");
		instance = this;



		auto ptr = dicon.Resolve<PointerManager>();
		playerDataStruct = DynamicStructFactory::make<bipedDataFields>(ptr, game);
		invulnerabilityFunction = ptr->getData<std::shared_ptr<MultilevelPointer>>("invulnerabilityFunction", game);
		invulnerabilityFunctionContext = ptr->getData<std::shared_ptr<MidhookContextInterpreter>>("invulnerabilityFunctionContext", game);
		invulnerabilityHook = ModuleMidHook::make(L"halo1", invulnerabilityFunction, invulnerabilityHookFunction);

	}

};




