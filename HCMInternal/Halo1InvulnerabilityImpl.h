#pragma once
#include "pch.h"
#include "InvulnerabilityImplBase.h"
#include "Invulnerability.h"
#include "ModuleHook.h"
#include "MultilevelPointer.h"
#include "MidhookContextInterpreter.h"
#include "PointerManager.h"
#include "OptionsState.h"
#include "Datum.h"
#include "RuntimeExceptionHandler.h"


class Halo1InvulnerabilityImpl : public Invulnerability::InvulnerabilityImplBase
{
private:
	static inline std::mutex mDestructionGuard{};
	static inline Datum* playersVehicleDatum = nullptr;

	static void invulnerabilityHookFunction(SafetyHookContext& ctx)
	{
#define makeInvuln() ctx.rflags = ctx.rflags | (1UL << 6)	// set zero flag to true if should be invuln

		std::scoped_lock lock(mDestructionGuard);

		if (OptionsState::invulnerabilityNPCToggle.get()->GetValue())
		{
			makeInvuln();
			return;
		}

		enum class param
		{
			unitDatum,
			playersVehicleDatum,
		};
		auto* ctxInterpreter = invulnerabilityFunctionContext.get();
		Datum currentDatum = *(Datum*)ctxInterpreter->getParameterRef(ctx, (int)param::unitDatum);
		Datum playersCurrentDatum;

		if (!playerDatum.get()->readData<Datum>(&playersCurrentDatum)) // this shouldn't ever fail
		{
			HCMInitException ex(std::format("Could not read players current datum, disabling invulnerability!"));
			RuntimeExceptionHandler::handleMessage(ex);
			OptionsState::invulnerabilityToggle.get()->resetToDefaultValue();
			return;
		}

		if (playersCurrentDatum == nullDatum) return; // might happen when the player is dead, depending on game version / pointer used

		// check if current actor is player
		if (currentDatum == playersCurrentDatum)
		{
			// store vehicle datum
			playersVehicleDatum = (Datum*)ctxInterpreter->getParameterRef(ctx, (int)param::playersVehicleDatum);
			PLOG_DEBUG << "playersVehicleDatum: " << playersVehicleDatum;
			makeInvuln();
			return;
		}

		// check if current actor is players vehicle
		// this can break if the player goes without getting damaged > changes address > gets in vehicle
		// a more robust implementation would probably use some sort of ObjectLookup service on the player datum
		if (!IsBadReadPtr(playersVehicleDatum, sizeof(Datum)))
		{
			auto playersCurrentVehicleDatum = *playersVehicleDatum;
				if (currentDatum == playersCurrentVehicleDatum && playersCurrentVehicleDatum != nullDatum)
				{
					PLOG_DEBUG << "Making players vehicle invuln: " << currentDatum;
						makeInvuln();
						return;
				}
		}



	}

	static inline std::shared_ptr<ModuleMidHook> invulnerabilityHook;
	static inline std::shared_ptr<MultilevelPointer> invulnerabilityFunction;
	static inline std::shared_ptr<MidhookContextInterpreter> invulnerabilityFunctionContext;
	static inline std::shared_ptr<MultilevelPointer> playerDatum;

	void onInvulnToggle(bool& newVal) override
	{
		invulnerabilityHook.get()->setWantsToBeAttached(newVal);
	}

public:
	Halo1InvulnerabilityImpl(GameState game)
	{
		invulnerabilityFunction = PointerManager::getData<std::shared_ptr<MultilevelPointer>>("invulnerabilityFunction", game);
		invulnerabilityFunctionContext = PointerManager::getData<std::shared_ptr<MidhookContextInterpreter>>("invulnerabilityFunctionContext", game);
		invulnerabilityHook = ModuleMidHook::make(L"halo1", invulnerabilityFunction, invulnerabilityHookFunction);
		playerDatum = PointerManager::getData<std::shared_ptr<MultilevelPointer>>("playerDatum", game);
	}

	~Halo1InvulnerabilityImpl()
	{
		std::scoped_lock lock(mDestructionGuard);
		invulnerabilityHook.reset(); 		// destroy hooks (while destruction guard locked)
	}
};




