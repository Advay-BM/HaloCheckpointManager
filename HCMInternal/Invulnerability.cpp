#include "pch.h"
#include "Invulnerability.h"
#include "ModuleHook.h"
#include "MultilevelPointer.h"
#include "MidhookContextInterpreter.h"
#include "PointerManager.h"
#include "SettingsStateAndEvents.h"
#include "Datum.h"
#include "RuntimeExceptionHandler.h"
#include "DIContainer.h"
#include "IMCCStateHook.h"
#include "GetPlayerDatum.h"
#include "IMakeOrGetCheat.h"
#include "GetObjectAddress.h"
#include "DynamicStructFactory.h"
#include "MidhookFlagInterpreter.h"

struct boardingMechanicInfo
{
	bool gameHasBoarding = false;
	int32_t boardingTextFlagValueWhenFalse = 0x1;
};

template <GameState::Value game, boardingMechanicInfo boardingInfo> // templated only so we can have seperate versions of the static vars per game
class SimpleInvulnerabilityImpl : public InvulnerabilityImpl//, public std::enable_shared_from_this<SimpleInvulnerabilityImpl<game, boardingInfo>>
{
private:
	static inline std::mutex mDestructionGuard{};
	static inline SimpleInvulnerabilityImpl* instance = nullptr;
	GameState mGame;
	// event callbacks
	ScopedCallback<ToggleEvent> mInvulnerabilityToggleCallbackHandle;

	// injected services
	gsl::not_null<std::shared_ptr<IMCCStateHook>> mccStateHook;
	gsl::not_null<std::shared_ptr<IMessagesGUI>> messagesGUI;
	gsl::not_null<std::shared_ptr<RuntimeExceptionHandler>> runtimeExceptions;
	gsl::not_null<std::shared_ptr<SettingsStateAndEvents>> settings;
	gsl::not_null<std::shared_ptr< GetPlayerDatum>> getPlayerDatum;
	gsl::not_null<std::shared_ptr< GetObjectAddress>> getObjectAddress;

	//data
	static inline std::shared_ptr<ModuleMidHook> invulnerabilityHook;
	static inline std::shared_ptr<MultilevelPointer> invulnerabilityFunction;
	static inline std::shared_ptr<MidhookContextInterpreter> invulnerabilityFunctionContext;
	static inline std::shared_ptr< MidhookFlagInterpreter> invulnerabilityFunctionFlagSetter;
	enum class bipedDataFields { currentVehicleDatum };
	std::shared_ptr<DynamicStruct<bipedDataFields>> playerDataStruct;
	std::optional<std::shared_ptr<MultilevelPointer>> boardingText;
	std::optional<std::shared_ptr<MultilevelPointer>> boardingTextFlag;



	static void makeInvulnerable(SafetyHookContext& ctx)
	{
		LOG_ONCE(PLOG_DEBUG << "making object invulnerable");
		invulnerabilityFunctionFlagSetter->setFlag(ctx);
	}

	constexpr static std::array<std::wstring_view, 2> boardingTextsToCheck() { return { L"to melee", L"to plant" }; }

	static bool playerIsBoarding()
	{
		if (!instance->boardingText.has_value() || !instance->boardingTextFlag.has_value()) { LOG_ONCE(PLOG_DEBUG << "optional boarding pointers lacked values"); return false; }
		std::wstring resolvedBoardingText;
		int32_t resolvedBoardingTextFlag;
		if (!instance->boardingText.value()->readData(&resolvedBoardingText)) { LOG_ONCE(PLOG_DEBUG << "could not resolve boarding text"); return false; }
		if (!instance->boardingTextFlag.value()->readData(&resolvedBoardingTextFlag)) { LOG_ONCE(PLOG_DEBUG << "could not resolve boarding text flag"); return false; }
		if (resolvedBoardingTextFlag == boardingInfo.boardingTextFlagValueWhenFalse) { LOG_ONCE(PLOG_DEBUG << "boarding text was not active"); return false; }

		LOG_ONCE_CAPTURE(PLOG_DEBUG << "evaluating boarding text, current val: " << text, text = resolvedBoardingText);

		//todo: add multilevelpointer_readPlainString and check for containing rel text


			//constexpr std::wstring_view actualBoardingText1 = L"to melee";
			//constexpr std::wstring_view actualBoardingText2 = L"to plant";

		for (auto& check : boardingTextsToCheck())
		{
			if (resolvedBoardingText.contains(check)) return true;
		}
		return false;

	}

	static void invulnerabilityHookFunction(SafetyHookContext& ctx)
	{
		std::unique_lock<std::mutex> lock(mDestructionGuard);
		LOG_ONCE(PLOG_DEBUG << "invulnerabilityHookFunction running");
		try
		{

			if (instance->settings->invulnerabilityNPCToggle->GetValue())
			{
				// when this option checked, we make EVERYTHING invuln- no need to check what's getting damaged
				return makeInvulnerable(ctx);
			}

			enum class param
			{
				currentlyDamagedUnitDatum
			};
			auto* ctxInterpreter = invulnerabilityFunctionContext.get();
			LOG_ONCE_CAPTURE(PLOG_DEBUG << "resolvedParam: " << resolvedParam, resolvedParam = ctxInterpreter->getParameterRef(ctx, (int)param::currentlyDamagedUnitDatum));

			Datum currentlyDamagedUnitDatum = *(Datum*)ctxInterpreter->getParameterRef(ctx, (int)param::currentlyDamagedUnitDatum);
			Datum playersCurrentDatum = instance->getPlayerDatum->getPlayerDatum();


			if (playersCurrentDatum.isNull() || currentlyDamagedUnitDatum.isNull()) return; // might happen when the player is dead, depending on game version / pointer used

			// check if current actor is player
			if (currentlyDamagedUnitDatum == playersCurrentDatum)
			{
				return makeInvulnerable(ctx);
			}

			LOG_ONCE_CAPTURE(PLOG_DEBUG << "playersCurrentDatum: " << datum, datum = playersCurrentDatum);

			// update address of players biped data

			auto playerAddress = instance->getObjectAddress->getObjectAddress(playersCurrentDatum, CommonObjectType::Biped);
			LOG_ONCE_CAPTURE(PLOG_DEBUG << "updating playerDataStructs currentBaseAddress: " << std::hex << addy, addy = playerAddress);
			instance->playerDataStruct->currentBaseAddress = playerAddress;

			// get current vehicle datum
			LOG_ONCE(PLOG_DEBUG << "looking up playersCurrentVehicleDatum");
			Datum playersCurrentVehicleDatum = *instance->playerDataStruct->field<Datum>(bipedDataFields::currentVehicleDatum);
			LOG_ONCE_CAPTURE(PLOG_DEBUG << "playersCurrentVehicleDatum: " << datum, datum = playersCurrentVehicleDatum);

			// if the current damaged unit is the players current vehicle, make invuln!
			if (currentlyDamagedUnitDatum == playersCurrentVehicleDatum)
			{
				// check if the player is actually BOARDING this vehicle, in which case we don't want to make it invuln
				if constexpr (boardingInfo.gameHasBoarding)
				{
					if (!playerIsBoarding())
					{
						LOG_ONCE_CAPTURE(PLOG_VERBOSE << "making players vehicle invuln!: " << datum, datum = currentlyDamagedUnitDatum);
						return makeInvulnerable(ctx);
					}
					else
					{
						LOG_ONCE_CAPTURE(PLOG_VERBOSE << "not making players boarded vehicle invuln!: " << datum, datum = currentlyDamagedUnitDatum);
						return;
					}
				}
				else
				{
					LOG_ONCE_CAPTURE(PLOG_VERBOSE << "making players vehicle invuln!: " << datum, datum = currentlyDamagedUnitDatum);
					return makeInvulnerable(ctx);
				}



			}

			LOG_ONCE_CAPTURE(PLOG_VERBOSE << "not making invulnerable: " << datum, datum = currentlyDamagedUnitDatum);
		}
		catch (HCMRuntimeException ex)
		{
			instance->runtimeExceptions->handleMessage(ex);
#ifndef HCM_DEBUG
			instance->settings->invulnerabilityToggle.get()->flipBoolSetting();
#endif // !HCM_DEBUG


		}




	}

	void onInvulnToggle(bool& newVal)
	{
		PLOG_DEBUG << "onInvulnToggle: newval: " << newVal;
		invulnerabilityHook->setWantsToBeAttached(newVal);
		if (mccStateHook->isGameCurrentlyPlaying(mGame))
		{
			messagesGUI->addMessage(newVal ? "Invulnerability enabled." : "Invulnerability disabled.");
		}

	}

public:
	SimpleInvulnerabilityImpl(GameState game, IDIContainer& dicon)
		: mGame(game),
		settings(dicon.Resolve<SettingsStateAndEvents>()),
		mInvulnerabilityToggleCallbackHandle(dicon.Resolve<SettingsStateAndEvents>()->invulnerabilityToggle->valueChangedEvent, [this](bool& newval) { onInvulnToggle(newval); }),
		mccStateHook(dicon.Resolve<IMCCStateHook>()),
		messagesGUI(dicon.Resolve<IMessagesGUI>()),
		runtimeExceptions(dicon.Resolve<RuntimeExceptionHandler>()),
		getPlayerDatum(resolveDependentCheat(GetPlayerDatum)),
		getObjectAddress(resolveDependentCheat(GetObjectAddress))
	{
		if (instance) throw HCMInitException(std::format("Cannot have more than one SimpleInvulnerabilityImpl per game, game: {}", game.toString()));

		auto ptr = dicon.Resolve<PointerManager>();
		playerDataStruct = DynamicStructFactory::make<bipedDataFields>(ptr, game);
		invulnerabilityFunction = ptr->getData<std::shared_ptr<MultilevelPointer>>(nameof(invulnerabilityFunction), game);
		invulnerabilityFunctionContext = ptr->getData<std::shared_ptr<MidhookContextInterpreter>>(nameof(invulnerabilityFunctionContext), game);
		invulnerabilityFunctionFlagSetter = ptr->getData<std::shared_ptr<MidhookFlagInterpreter>>(nameof(invulnerabilityFunctionFlagSetter), game);
		invulnerabilityHook = ModuleMidHook::make(game.toModuleName(), invulnerabilityFunction, invulnerabilityHookFunction);


		if constexpr (boardingInfo.gameHasBoarding)
		{
			try
			{
				boardingText = std::make_optional<std::shared_ptr<MultilevelPointer>>(ptr->getData<std::shared_ptr<MultilevelPointer>>(nameof(boardingText), game));
				boardingTextFlag = std::make_optional<std::shared_ptr<MultilevelPointer>>(ptr->getData<std::shared_ptr<MultilevelPointer>>(nameof(boardingTextFlag), game));
			}
			catch (HCMInitException ex)
			{
				PLOG_ERROR << "no boarding text/flag available for game: " << game.toString() << ", error: " << ex.what() << "\nBoarded vehicles will unfortunately be invulnerable.";
			}
		}

		instance = this;


	}

	~SimpleInvulnerabilityImpl()
	{
		PLOG_DEBUG << "~SimpleInvulnerabilityImpl";
		//mInvulnerabilityToggleCallbackHandle.~ScopedCallback(); // no new callback invokes
		invulnerabilityHook->setWantsToBeAttached(false);
		//invulnerabilityHook.reset(); // no new hook invokes
		std::unique_lock<std::mutex> lock(mDestructionGuard); // block until callbacks/hooks finish executing
		instance = nullptr;
	}

};







Invulnerability::Invulnerability(GameState game, IDIContainer& dicon)
{
	switch (game)
	{
	case GameState::Value::Halo1:
		pimpl = std::make_unique < SimpleInvulnerabilityImpl < GameState::Value::Halo1, boardingMechanicInfo(false, 0) >>(game, dicon);
	break;

	case GameState::Value::Halo2:
		pimpl = std::make_unique<SimpleInvulnerabilityImpl<GameState::Value::Halo2, boardingMechanicInfo(true, 0xFFFFFFFF)>>(game, dicon);
		break;

	case GameState::Value::Halo3:
		pimpl = std::make_unique<SimpleInvulnerabilityImpl<GameState::Value::Halo3, boardingMechanicInfo(true, 0x0)>>(game, dicon);
		break;

	case GameState::Value::Halo3ODST:
		pimpl = std::make_unique<SimpleInvulnerabilityImpl<GameState::Value::Halo3ODST, boardingMechanicInfo(true, 0x0)>>(game, dicon);
		break;

	case GameState::Value::HaloReach:
		pimpl = std::make_unique<SimpleInvulnerabilityImpl<GameState::Value::HaloReach, boardingMechanicInfo(true, 0x0)>>(game, dicon);
		break;

	case GameState::Value::Halo4:
		pimpl = std::make_unique<SimpleInvulnerabilityImpl<GameState::Value::Halo4, boardingMechanicInfo(true, 0x0)>>(game, dicon);
		break;

	default:
		throw HCMInitException("Unimplemented game");
	}
}

Invulnerability::~Invulnerability()
{
	PLOG_VERBOSE << "~" << getName();
	pimpl.reset();
}
