#pragma once
#include "IGUIElement.h"
#include "SettingsStateAndEvents.h"
class GUIInvulnerability : public IGUIElement {

private:
	std::string mToggleText;
	std::shared_ptr<Setting<bool>> mOptionToggle;
	std::optional<std::shared_ptr<IGUIElement>> m_invulnNPC;
	std::vector<std::thread> mUpdateSettingThreads;
public:


	GUIInvulnerability(GameState implGame, std::optional<HotkeysEnum> hotkey, std::string toggleText, std::shared_ptr<Setting<bool>> optionToggle, std::optional<std::shared_ptr<IGUIElement>> invulnNPC)
		: IGUIElement(implGame, hotkey), mToggleText(toggleText), mOptionToggle(optionToggle), m_invulnNPC(invulnNPC)
	{
		if (mToggleText.empty()) throw HCMInitException("Cannot have empty toggle text (needs label for imgui ID system, use ## for invisible labels)");
		PLOG_VERBOSE << "Constructing GUIInvulnerability, name: " << getName();
		PLOG_DEBUG << "mOptionToggle.getOptionName: " << std::hex << mOptionToggle->getOptionName();

		this->currentHeight = m_invulnNPC.has_value() ? 40 : 20;
	}

	void render(HotkeyRenderer& hotkeyRenderer) override
	{
		hotkeyRenderer.renderHotkey(mHotkey);
		ImGui::SameLine();
		if (ImGui::Checkbox(mToggleText.c_str(), &mOptionToggle->GetValueDisplay()))
		{
			PLOG_VERBOSE << "GUIInvulnerability (" << getName() << ") firing toggle event, new value: " << mOptionToggle->GetValueDisplay();
			auto& newThread = mUpdateSettingThreads.emplace_back(std::thread([optionToggle = mOptionToggle]() { optionToggle->UpdateValueWithInput(); }));
			newThread.detach();
		}

		if (m_invulnNPC.has_value())
		{
				m_invulnNPC.value()->render(hotkeyRenderer);
				this->currentHeight = 40 + m_invulnNPC.value()->getCurrentHeight();
		}
	}

	~GUIInvulnerability()
	{
		for (auto& thread : mUpdateSettingThreads)
		{
			if (thread.joinable())
			{
				PLOG_DEBUG << getName() << " joining mUpdateSettingThread";
				thread.join();
				PLOG_DEBUG << getName() << " mUpdateSettingThread finished";
			}

		}
	}

	std::string_view getName() override { return mToggleText; }

};